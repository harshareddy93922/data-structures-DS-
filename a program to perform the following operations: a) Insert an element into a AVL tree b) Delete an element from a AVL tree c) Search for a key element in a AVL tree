a)
#include <stdio.h>
#include <stdlib.h>

struct node {
  int data;
  int height;
  struct node *left;
  struct node *right;
};

int max(int a, int b) {
  return (a > b) ? a : b;
}

int height(struct node *node) {
  if (!node) return 0;
  return node->height;
}

struct node *newNode(int data) {
  struct node *node = (struct node *)malloc(sizeof(struct node));
  node->data = data;
  node->left = NULL;
  node->right = NULL;
  node->height = 1;
  return node;
}

struct node *rightRotate(struct node *y) {
  struct node *x = y->left;
  struct node *T2 = x->right;
  x->right = y;
  y->left = T2;
  y->height = max(height(y->left), height(y->right)) + 1;
  x->height = max(height(x->left), height(x->right)) + 1;
  return x;
}

struct node *leftRotate(struct node *x) {
  struct node *y = x->right;
  struct node *T2 = y->left;
  y->left = x;
  x->right = T2;
  x->height = max(height(x->left), height(x->right)) + 1;
  y->height = max(height(y->left), height(y->right)) + 1;
  return y;
}

int getBalance(struct node *node) {
  if (!node) return 0;
  return height(node->left) - height(node->right);
}

struct node *insert(struct node *node, int data) {
  if (!node) return newNode(data);
  if (data < node->data) node->left = insert(node->left, data);
  else if (data > node->data) node->right = insert(node->right, data);
  else return node;
  node->height = 1 + max(height(node->left), height(node->right));
  int balance = getBalance(node);
  if (balance > 1 && data < node->left->data) return rightRotate(node);
  if (balance < -1 && data > node->right->data) return leftRotate(node);
  if (balance > 1 && data > node->left->data) {
    node->left = leftRotate(node->left);
    return rightRotate(node);
  }
  if (balance < -1 && data < node->right->data) {
    node->right = rightRotate(node->right);
    return leftRotate(node);
  }
  return node;
}

void preOrder(struct node *root) {
  if (root != NULL) {
    printf("%d ", root->data);
    preOrder(root->left);
    preOrder(root->right);
  }
}

int main() {
  struct node
b)
#include <stdio.h>
#include <stdlib.h>

struct node {
  int data;
  int height;
  struct node *left;
  struct node *right;
};

int max(int a, int b) {
  return (a > b) ? a : b;
}

int height(struct node *node) {
  if (!node) return 0;
  return node->height;
}

struct node *newNode(int data) {
  struct node *node = (struct node *)malloc(sizeof(struct node));
  node->data = data;
  node->left = NULL;
  node->right = NULL;
  node->height = 1;
  return node;
}

struct node *rightRotate(struct node *y) {
  struct node *x = y->left;
  struct node *T2 = x->right;
  x->right = y;
  y->left = T2;
  y->height = max(height(y->left), height(y->right)) + 1;
  x->height = max(height(x->left), height(x->right)) + 1;
  return x;
}

struct node *leftRotate(struct node *x) {
  struct node *y = x->right;
  struct node *T2 = y->left;
  y->left = x;
  x->right = T2;
  x->height = max(height(x->left), height(x->right)) + 1;
  y->height = max(height(y->left), height(y->right)) + 1;
  return y;
}

int getBalance(struct node *node) {
  if (!node) return 0;
  return height(node->left) - height(node->right);
}

struct node *minValueNode(struct node *node) {
  struct node *current = node;
  while (current->left != NULL) current = current->left;
  return current;
}

struct node *deleteNode(struct node *root, int data) {
  if (!root) return root;
  if (data < root->data) root->left = deleteNode(root->left, data);
  else if (data > root->data) root->right = deleteNode(root->right, data);
  else {
    if ((root->left == NULL) || (root->right == NULL)) {
      struct node *temp = root->left ? root->left : root->right;
      if (!temp) {
        temp = root;
        root = NULL;
      } else *root = *temp;
      free(temp);
    } else {
      struct node *temp = minValueNode(root->right);
      root->data = temp->data;
      root->right = deleteNode(root->right, temp->data);
    }
  }
  if (!root) return root;
  root->height = 1 + max(height(root->left), height(root->right));
  int balance = getBalance(root);
  if (balance > 1 && getBalance(root->left) >= 0) return rightRotate(root);
c)
#include <stdio.h>
#include <stdlib.h>

struct node {
  int data;
  int height;
  struct node *left;
  struct node *right;
};

int max(int a, int b) {
  return (a > b) ? a : b;
}

int height(struct node *node) {
  if (!node) return 0;
  return node->height;
}

struct node *newNode(int data) {
  struct node *node = (struct node *)malloc(sizeof(struct node));
  node->data = data;
  node->left = NULL;
  node->right = NULL;
  node->height = 1;
  return node;
}

struct node *rightRotate(struct node *y) {
  struct node *x = y->left;
  struct node *T2 = x->right;
  x->right = y;
  y->left = T2;
  y->height = max(height(y->left), height(y->right)) + 1;
  x->height = max(height(x->left), height(x->right)) + 1;
  return x;
}

struct node *leftRotate(struct node *x) {
  struct node *y = x->right;
  struct node *T2 = y->left;
  y->left = x;
  x->right = T2;
  x->height = max(height(x->left), height(x->right)) + 1;
  y->height = max(height(y->left), height(y->right)) + 1;
  return y;
}

int getBalance(struct node *node) {
  if (!node) return 0;
  return height(node->left) - height(node->right);
}

struct node *search(struct node *root, int key) {
  if (!root) return NULL;
  if (key == root->data) return root;
  if (key < root->data) return search(root->left, key);
  return search(root->right, key);
}

int main() {
  struct node *root = NULL;
  root = insert(root, 10);
  root = insert(root, 20);
  root = insert(root, 30);
  root = insert(root, 40);
  root = insert(root, 50);
  root = insert(root, 25);
  int key = 30;
  struct node *result = search(root, key);
  if (result) printf("Key %d found in the AVL tree\n", result->data);
  else printf("Key %d not found in the AVL tree\n", key);
  return 0;
}
